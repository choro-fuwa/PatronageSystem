server:
  port: 8081

spring:
  application:
    name: patronage-strategy
  
  # 数据源配置
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/patronage_strategy?useUnicode=true&characterEncoding=utf8&useSSL=false&serverTimezone=GMT%2B8&allowPublicKeyRetrieval=true
    username: root
    password: 243417
    type: com.alibaba.druid.pool.DruidDataSource
    druid:
      initial-size: 5
      min-idle: 5
      max-active: 20
      max-wait: 60000
      time-between-eviction-runs-millis: 60000
      min-evictable-idle-time-millis: 300000
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      filters: stat,wall,slf4j
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: "*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"
      stat-view-servlet:
        enabled: true
        url-pattern: /druid/*
        reset-enable: false
        login-username: admin
        login-password: admin

  # Redis配置
  data:
    redis:
      host: localhost
      port: 6379
      password: 
      database: 0
      timeout: 10000ms
      lettuce:
        pool:
          max-active: 8
          max-wait: -1ms
          max-idle: 8
          min-idle: 0

  # Kafka配置
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      acks: all
      retries: 3
      batch-size: 16384
      linger-ms: 1
      buffer-memory: 33554432
    consumer:
      group-id: strategy-group
      auto-offset-reset: earliest
      enable-auto-commit: true
      auto-commit-interval: 1000
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      max-poll-records: 500

  # 缓存配置
  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: true

  # 异步任务配置
  task:
    execution:
      pool:
        core-size: 10
        max-size: 20
        queue-capacity: 100
        keep-alive: 60s
        thread-name-prefix: strategy-async-

  # 文件上传配置
  servlet:
    multipart:
      max-file-size: 10MB
      max-request-size: 100MB

# MyBatis-Plus配置
mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    cache-enabled: false
    call-setters-on-nulls: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    lazy-loading-enabled: true
    aggressive-lazy-loading: false
  global-config:
    banner: false
    db-config:
      id-type: auto
      logic-delete-field: deleted
      logic-delete-value: 1
      logic-not-delete-value: 0

# 应用监控配置
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus,env,configprops
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always
    info:
      enabled: true
    metrics:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    tags:
      application: ${spring.application.name}
  health:
    redis:
      enabled: true
    db:
      enabled: true
    kafka:
      enabled: true

# 日志配置
logging:
  level:
    root: INFO
    com.patronage.strategy: DEBUG
    org.springframework.web: INFO
    com.baomidou.mybatisplus: INFO
    org.springframework.security: DEBUG
    org.springframework.cache: DEBUG
    org.springframework.data.redis: DEBUG
    org.apache.kafka: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n"
  file:
    name: logs/patronage-strategy.log
    max-size: 100MB
    max-history: 30

# OpenAPI配置 (SpringDoc)
springdoc:
  api-docs:
    enabled: true
    path: /api-docs
  swagger-ui:
    enabled: true
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  packages-to-scan: com.patronage.strategy.controller
  info:
    title: Patronage Strategy API
    description: 策略管理系统API文档
    version: 1.0.0
    contact:
      name: Patronage Team
      email: support@patronage.com

# 安全配置
jwt:
  secret: patronage-strategy-secret-key-2024
  expiration: 86400000
  header: Authorization
  prefix: Bearer

# 自定义配置
patronage:
  strategy:
    # Python脚本路径
    python-script-path: ./python/scripts
    # 回测数据路径
    backtest-data-path: ./data/backtest
    # 策略配置
    strategy:
      # 最大并发策略数
      max-concurrent-strategies: 10
      # 策略执行间隔(秒)
      execution-interval: 60
      # 风险控制
      risk:
        max-position-size: 0.1
        max-drawdown: 0.2
        stop-loss: 0.05
    # 预警推送配置
    alert:
      email:
        enabled: true
        smtp-host: smtp.qq.com
        smtp-port: 587
        username: 2139341759@qq.com
        password: zmgnlknscmtmcgid
        from: 2139341759@qq.com
        to: admin@patronage.com
      sms:
        enabled: false
        api-url: 
        api-key: 
        api-secret: 
      webhook:
        enabled: false
        url: 
        secret: 
    # WebSocket配置
    websocket:
      enabled: true
      endpoint: /ws/strategy
      allowed-origins: "*"
    # 缓存配置
    cache:
      strategy-list: 300
      strategy-detail: 600
      backtest-result: 1800
    # 文件上传配置
    upload:
      max-size: 10MB
      allowed-types: .py,.csv,.xlsx,.json
      path: ./uploads
    # 监控配置
    monitor:
      # 监控间隔(秒)
      interval: 30
      # 历史数据保留天数
      retention-days: 30
      # 指标配置
      metrics:
        enabled: true
        export-interval: 60 